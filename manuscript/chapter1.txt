# Chapter 1
## Introduction to the text
Topics covered from most time spent to least:
- Azure cloud platform (taking a services first approach): If you want to get certified, this is an excellent resource! 
- Infustructure/ARMS templates  (including inf as code)
- Azure SDK for Go
- Go programming language
- Other tidbits of wisdom

In this first chapter, I want to set you up for success as you use this book to guide you along a journey of
exploring...

Benefits of ARM Templates:
- Version control: This helps improve transparency, collaboration, and accountability in your infrastructure management processes.
- Reproducibility and Consistency: helps avoid human-error
- Scalability and Automation: Provision does not have to be manual and can happen as nessesary

important in the modern cloud era where the act of setting up infrastructure has become the passing of configuration instructions to a cloud platform. When we say "as code" we mean that all the good practices we've learned in the software world should be applied to infrastructure. Using source control, adhering to the DRY principle, modularization, maintainability, and using automated testing and deployment are all critical practices. Those of us with a deep software and infrastructure background need to empathize with and support colleagues who do not. Saying "treat infrastructure like code" isn't enough; we need to ensure the hard-won learnings from the software world are also applied consistently throughout the infrastructure realm.


In addition to the technology I cover in this book, I try to exemplify what I feel are "soft skills", attitudes,
and leadership skills that we (practitioners in technology fields) can use to help build a professional, 
effecient, and supportive culture in our workplaces and, ultimitaly, create better products for our customers!
I do this indirectly through the voice and tone of my writting, and directly in the form of tangents called 
"Soft Skills in Tech".

For the remainder of this chapter, I will  a little bit about what kinds of previous knowledge might be helpful, 
talk about motivation and what to do if you don't have previous knowledge, and provide some external resources
for documentation and reference.

## Prerequisites
I firmly believe that in absence of previous "coding" or cloud knowledge or experience, 
if you have the patience and motivation to do your own research to close any knowledge gaps you may have, 
you will be able to understand most of the material in this book. With that being said, the following skills
would be helpful:
- You understand the basic principles of computer programming.
- You understand the basics principles of cloud computing.
- You can do research when an unknown concept is introduced.
- You can use standard technical documentation to do things like install and use software.

I try to define and explain concepts at a foundational level. Also, when using an acronym for the first time, 
I spell out the full term followed by the acronym in parentheses. Finally, I try to provide links to learning
resources which may help explain a particularly complex topic. 

## General Documentation and References
Here are a few resources for those moments when you do need to, or want to, learn more about Azure or Go:

[The Go Programming Language Specification](https://go.dev/ref/spec)

[Microsoft documentation for Go developers](https://learn.microsoft.com/en-us/azure/developer/go/)

[Go package reference for the SDK](https://pkg.go.dev/github.com/Azure/azure-sdk-for-go)

[Azure Resource Manager (ARM) template documentation](https://learn.microsoft.com/en-us/azure/azure-resource-manager/templates/)

{aside}
## Soft Skills in Tech
*Define, explain, and ensure aggreement on concepts, acronyms, and words*

Our langauge can be esoteric.
One term may have slightly different meanings to different people (even among developers). 
We often assume previous knowledge and common understandings.
Acronyms that not even we know the meaning of.

We can do our field a great service by being aware of these common places (use more concise wording) for 
confusion and use one or more of these communication strategies:
- Use a more general term
- Provide contextual clue to the meaning of a word
- Show how arrived to a conclusion
- Introduce an acynom (just like APA style)
- Share your understanding of a term (and know that your understanding may not be the only one)
{/aside}

## Avoid Unnecessary Costs
If you execute the code from this presentation, 
there is the possibility that you may incur some costs 
from the Azure services you create. 

The actual cost is largely dependent on how long you leave 
the services running, so make sure to keep a close eye on 
the bill for your subscription and delete any resources that 
you create as soon as you are done using them.

## Understand the Azure SDK
The Azure SDK for Go provides several libraries to communicate 
with and programmatically manage Azure services.

The SDK is built on top of the Azure REST API. This hierarchy 
you to access the functionality of the Azure REST API directly 
from your Go programs.

So if you want to interact with Azure services through a server 
built in Go or an executable Go program running on a physical or 
virtual machine, the Azure Go SDK makes it possible.

Before I actually get into showing off the code to the SDK program, 
I want to mention some alternatives to using the Go SDK and provide 
general guidance for setting up a local development environment.

The Azure Resource Manager is an Azure service which receives all 
requests for managing a resource: these can be requests to read, 
create, delete, or update a resource. 

When I send a request through my Go SDK program, the resource manager 
receives, authenticates and authorizes that request before forwarding 
it to the appropriate Azure service. 

## Understand Alternatives to the SDK
Because all requests are handled through the same Resource Manager API, 
the results and capabilities are consistent throughout all the available 
resource management tools, or interfaces as they are sometimes referred 
to in the docs.

While I have chosen to use the Go SDK as my tool for working with the 
Azure Resource Manager, I want to mention the alternative tools you could 
choose to use in place of the Go SDK:
- The Azure Portal;
- PowerShell;
- Azure CLI;
- The REST API;
- Terraform;
- And Client SDKs for Java, Dot Net, Javascript, Python, C, and C++

Each of these interfaces merit a bit of research to understand their 
advantages and disadvantages, but I will not talk more about them here. 
Just know that you could essentially use any of them in-place of the Go SDK.

## Setup Local Environment (wording)
(EDIT: sentence fragment) Guidance for getting your local coding environment set up 
for running the Azure SDK for Go. 
Running this (EDIT: which project?) project on one of the three major operating systems (Mac, Windows, 
or Linux) requires the following (EDIT: following what?):
- A command line processor;
- A text editor;
- An installation of Go;
- A Microsoft Azure account;
- And the Azure CLI.

Click on your operating system below for basic setup links to help you 
get setup on your system.
## Mac
- Command Line: https://support.apple.com/guide/terminal/welcome/mac 
- Text Editor: https://code.visualstudio.com/docs/?dv=osx
- Go: https://go.dev/doc/install 
- Azure: https://azure.microsoft.com/en-ca/free/ 
- CLI: https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-macos 
## Windows
- Command line: https://learn.microsoft.com/en-us/powershell/scripting/overview
- Text Editor: https://code.visualstudio.com/docs/?dv=win
- Go: https://go.dev/doc/install 
- Azure: https://azure.microsoft.com/en-ca/free/
- CLI: https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-windows?tabs=azure-cli 
## Linux
- Cross platform command line tool: https://tabby.sh/ 
- Text Editor: [Debian or Ubuntu] https://code.visualstudio.com/docs/?dv=linux64_deb 
- Text Editor: [Red Hat, Fedora, or SUSE] https://code.visualstudio.com/docs/?dv=linux64_deb 
- Go: https://go.dev/doc/install 
- Azure: https://azure.microsoft.com/en-ca/free/ 
- CLI: https://learn.microsoft.com/en-us/cli/azure/install-azure-cli-linux 


***Personal (jonathan.d.wesley) Azure Credentials***
export AZURE_SUBSCRIPTION_ID="d88a3473-bb31-4a61-80a7-1e614fa1c2cc"
export AZURE_TENANT_ID="59133951-7c4b-483f-bb98-6255f2b4e572"
export AZURE_CLIENT_ID="3c227757-e69d-43dd-b78d-57a48a4ef6fa"
export AZURE_CLIENT_SECRET=".4A8Q~5Ex1ed807waGY2-Roipnqp5t~jyPzVFazR"