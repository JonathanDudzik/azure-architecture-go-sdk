# Contents

1. Creating our Go program main package
1. Go imports
1. Go main function
1. Creating Go variables

In this and the next few chapters I will explain the structure 
and execusion of our Azure SDK for Go program. These chapters 
could be skipped if you already know, or do not wish to learn, how 
the Azure SDK for Go works.

One important thing to note is that while we start with a small block 
of code in this chapter, that code will not do anything significant yet.
To rectify that, we will take the next few chapters and add additional code to this 
same block of code before it can work.

Let us get started right away by looking at the code for this chapter which
creates our main go package, imports nessesary external packages and defines
a number of important variables that we will use later to work with the SDK

```go
package main

import (
	// import standard library packages
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"

	// import Azure SDK packages
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
)

// declare the main function
func main() {
	ctx := context.Background()
	subscriptionID := os.Getenv("AZURE_SUBSCRIPTION_ID")
	resourceGroupName := "Go-SDK-VM"
	resourceGroupLocation := "eastus2"
	deploymentName := "deployVM"
}
```

BLURB 
This is NOT how I typitcally write code. It is never this clean initially.
Normally I will put all the code in one single file to that I can test and experiment easier.
Skill: realize that software development is an interitive process and that we all make mistakes. 
Don't be arrogant.

## Line-by-line explinations
**Line 1:**
```go
package main
```

Declaring this file as the "main" package makes this file the entry point of our Go program. Being 
the entry point means this file must have a function called main() which will be the first function 
that gets called when our program starts up. Consequently, all the code in this file is part of the 
main package.

**Lines 3 through 16:**
```go
import (
	// import standard library packages
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"

	// import Azure SDK packages
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/azidentity"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armresources"
)
``` 

The import statement normally, but not nessesarily, goes right after our package name. The import 
statement brings in and identifies libraries that we will use in our program. Imported packages could 
be from the standard library, the internet, or your local machine. In the case of our SDK program, 
we are importing some standard library packages and some Azure SDK for Go packages.

BLURB
Learn more about each library by visiting the docs. 
If you are using VS Code as your text editor, you should be able to get a link to these specific 
libraryâ€™s documentation by hovering over the line of code that imports that library and finding 
the link in the popup. You can also manually access the library's docs by appending the URL for 
the library onto https://pkg.go.dev. For example the URL 
<https://pkg.go.dev/github.com/Azure/azure-sdk-for-go/sdk/azidentity> would take you to the 
azidentity library's documentation page.

BLURB: Why not just import all the standard lib?

**Line 19 through 25:**
```go
func main() {
	ctx := context.Background()
	subscriptionID := os.Getenv("AZURE_SUBSCRIPTION_ID")
	resourceGroupName := "Go-SDK-VM"
	resourceGroupLocation := "eastus2"
	deploymentName := "deployVM"
}
```

 in Go, all variables must be declared before they can be used.
 Here we are using the the shorthand notation `:=` to declare and 
 initialize a variable without specifying its type. The type is 
 inferred from the initial value.

 BLURB GO is a statically-typed language. That means....